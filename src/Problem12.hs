module Problem12 where
{--
  Task description:
  The sequence of triangle numbers is generated by adding the natural numbers.
  So the 7^(th) triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

  1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

  Let us list the factors of the first seven triangle numbers:

       1: 1
       3: 1,3
       6: 1,2,3,6
      10: 1,2,5,10
      15: 1,3,5,15
      21: 1,3,7,21
      28: 1,2,4,7,14,28

  We can see that 28 is the first triangle number to have over five divisors.

  What is the value of the first triangle number to have over five hundred divisors?
--}

import Control.Monad (guard)

triangles :: [Integer]
triangles = helper 0 [1..]
  where
  helper n (x:xs) =
    let n' = n+x
    in n' : helper n' xs

someDivisors :: Integer -> [Integer]
someDivisors num = do
  let limit = floor . sqrt $ fromIntegral num
  x <- [2..limit]
  guard (num `mod` x == 0)
  return x

getDivisorCount :: Integer -> Int
getDivisorCount num = 2 * length (someDivisors num) + 2

solve :: Integer
solve = head $ filter (\x -> getDivisorCount x >= 500) triangles

main = print solve
